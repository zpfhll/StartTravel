E00000 正常
E00001 网络问题
E00002 服务器连接不可
E00003 必须值缺失
E00004 插入用户失败
E00005 获取用户ID错误
E00006 获取未完成的旅行错误
E00007 插入旅行数据错误
E00008 插入旅行的人员错误
E00009 查询旅行的人员错误
E00010 明细的插入错误
E00011 明细与人员的关联信息插入错误
E00012 明细的查询错误
E00013 明细与用户查询错误
E00014 标记查询错误
E00015 标记插入错误
E00016 单个标记查询错误
E00017
E00018
E00019
E00020
E00021
E00022
E00023
E00024
E00025
E00026
E00027
E00028
E00029
E00030
E00031
E00032
E00033
E00034
E00035
E00036
E00037
E00038
E00039
E00040
E00041
E00042
E00043
E00044
E00045
E00046
E00047
E00048
E00049
E00050
E00051
E00052
E00053
E00054
E00055
E00056
E00057
E00058
E00059
E00060
E00061
E00062
E00063
E00064
E00065
E00066
E00067
E00068
E00069
E00070
E00071
E00072
E00073
E00074
E00075
E00076
E00077
E00078
E00079
E00080
E00081
E00082
E00083
E00084
E00085
E00086
E00087
E00088
E00089
E00090
E00091
E00092
E00093
E00094
E00095
E00096
E00097
E00098
E00099
E00100






//多条流水线式请求
 @ExperimentalCoroutinesApi
    private fun step1(user:String, password:String) = GlobalScope.produce<InternetResponse> {
        HLogger.instance().e("step1:",user)
        val apiAccess = ApiAccess()
        val response = apiAccess.signIn(user,password)
        send(response)
    }

    @ExperimentalCoroutinesApi
    private fun step2(user:String,step1:ReceiveChannel<InternetResponse>) = GlobalScope.produce {
        HLogger.instance().e("step2:",user)
        if(!step1.isClosedForReceive) {
            val step1Response = step1.receive()
            if (step1Response.internetBean == null ){
                send(step1Response)
            }else {
                val apiAccess = ApiAccess()
                val response = apiAccess.signIn(user, "password")
                send(response)
            }
        }
    }

    @ExperimentalCoroutinesApi
    private suspend fun sumLogin(user:String): InternetResponse?{
        val mStep1 = step1(user,"password")
        val mStep2 = step2(user, mStep1)
        val result = mStep2.receive()
        HLogger.instance().e("$user:", result.toString())
        return result
    }


    private fun moveToLogin(){
//        val  intent = Intent(this,LoginActivity::class.java)
//        baseStartActivity(intent,ActivityMoveEnum.START_FROM_RIGHT)
        loading.visibility = View.VISIBLE
        HLogger.instance().e("start:","moveToLogin")
        GlobalScope.launch {
            HLogger.instance().e("start:","launch")
            val time = measureTimeMillis {
                val user1 = async {  sumLogin("user1@test.com")}
                val user2 = async {  sumLogin("user2@test.com")}
                HLogger.instance().e("----->user2","${user2.await()}")
                HLogger.instance().e("----->user1","${user1.await()}")
            }
            HLogger.instance().e("time:","$time")
            val message = Message()
            message.what = 1
            closeLoadingHandler.sendMessage(message)
        }
    }