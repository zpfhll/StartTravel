package hll.zpf.starttravel.common.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import hll.zpf.starttravel.common.database.entity.Travel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAVEL".
*/
public class TravelDao extends AbstractDao<Travel, String> {

    public static final String TABLENAME = "TRAVEL";

    /**
     * Properties of entity Travel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Memo = new Property(2, String.class, "memo", false, "memo");
        public final static Property StartDate = new Property(3, String.class, "startDate", false, "start_date");
        public final static Property EndDate = new Property(4, String.class, "endDate", false, "end_date");
        public final static Property Money = new Property(5, float.class, "money", false, "money");
        public final static Property State = new Property(6, int.class, "state", false, "state");
        public final static Property Image = new Property(7, byte[].class, "image", false, "image");
        public final static Property UserId = new Property(8, String.class, "userId", false, "user_id");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
    }

    private DaoSession daoSession;

    private Query<Travel> user_TravelListQuery;

    public TravelDao(DaoConfig config) {
        super(config);
    }
    
    public TravelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAVEL\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"memo\" TEXT," + // 2: memo
                "\"start_date\" TEXT," + // 3: startDate
                "\"end_date\" TEXT," + // 4: endDate
                "\"money\" REAL NOT NULL ," + // 5: money
                "\"state\" INTEGER NOT NULL ," + // 6: state
                "\"image\" BLOB," + // 7: image
                "\"user_id\" TEXT," + // 8: userId
                "\"TYPE\" INTEGER NOT NULL );"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAVEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Travel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(3, memo);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(5, endDate);
        }
        stmt.bindDouble(6, entity.getMoney());
        stmt.bindLong(7, entity.getState());
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(8, image);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Travel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(3, memo);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(5, endDate);
        }
        stmt.bindDouble(6, entity.getMoney());
        stmt.bindLong(7, entity.getState());
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(8, image);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void attachEntity(Travel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Travel readEntity(Cursor cursor, int offset) {
        Travel entity = new Travel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // memo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endDate
            cursor.getFloat(offset + 5), // money
            cursor.getInt(offset + 6), // state
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userId
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Travel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMemo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMoney(cursor.getFloat(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Travel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Travel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Travel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "travelList" to-many relationship of User. */
    public List<Travel> _queryUser_TravelList(String userId) {
        synchronized (this) {
            if (user_TravelListQuery == null) {
                QueryBuilder<Travel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TravelListQuery = queryBuilder.build();
            }
        }
        Query<Travel> query = user_TravelListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
